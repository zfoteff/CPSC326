type SimpleStruct
   var v1: int = 0
   var v2: double = 0.0
   var v3: string = ""
   var v4 = nil
end

fun int f1()
   var x = 5
   return nil
   x = 6
   x.y = 6
   x.y.z = "hi!"
   y = f(x)
   var x = (3 % 3)
   var x = (40 / (10 / 2))
   var x = (2 + (3 / (4 + 5)))
   y = (1 + 2)
   y = ((4 / 2) + (2 - (3 * 2)))
   var s: string = concat(concat("foo ", "bar "), " baz")
   var f: double = ((10.0 / 2.0) - (3.0 + 1.14159))
end

fun int add_one(x: int)
   x = (x + 1)
   return x
end

fun string add(x: string, y: double)
   return (x + y)
end

fun int main()
   while (x >= 1) do
      x = (x - 1)
      print(x)
   end
   while (((x or y) and z) or (not v and not ((v == 0) or not x))) do
      print(y)
      return 5
   end
   for i = (3 * 4) to neg 1 do
      x = (x * i)
   end
   if true then
      print("true")
   end
   if (x < y) then
      print("x")
   elseif (x > y) then
      print("y")
   elseif (x == y) then
      print("x or y")
   else
      print("oops")
   end
   if (x <= y) then
      if (x != y) then
         print("x or y")
      else
         print("x")
      end
   elseif (x > y) then
      print("y")
   else
      print(add_one(x))
   end
end

fun nil comp_(foo_bar: int, baz: MyType)
   if ((foo_bar > 0) or not baz) then
      while (foo_bar == 1) do
         print("!")
         if (baz == nil) then
            print("")
         end
      end
   end
end

fun int main()
   var ptr1 = new Node
   var ptr2 = new Node
   var ptr3 = new Node
   ptr1.next = ptr2.ptr2.next
   d = ptr3
   ptr3.next = nil
   ptr1.next.val = 3
   ptr1.next = ptr2.next.val
   ptr1.next.next.next.next = ptr2.next.next.next.next
   if new Node then
      ptr1 = new Node
      ptr2.val = (ptr1.val + ptr3.val)
      ptr3 = setVal(new Node, ptr.val)
   end
end

